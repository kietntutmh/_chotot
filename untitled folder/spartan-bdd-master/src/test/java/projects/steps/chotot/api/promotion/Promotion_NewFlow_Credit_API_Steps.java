package projects.steps.chotot.api.promotion;

import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import projects.functions.chotot.promotion.Promotion_NewFlow_Credit_API_Functions;

import static api.configuration.DataConfig.newUserPhone;
import static api.configuration.GatewayConfig.*;
import static api.utils.GetAccessToken.*;
import static projects.functions.chotot.userGroup.UserGroup_API_Functions.*;

public class Promotion_NewFlow_Credit_API_Steps extends Promotion_NewFlow_Credit_API_Functions {

    @Then("I should see the campaign is created with status is New")
    public void iShouldSeeTheCampaignIsCreatedWithStatusIsNew() {
        verifyCampaignCodeStatusIsNew();
    }

    @When("ChoTot add a new Public campaign of promotion campaign for All users")
    public void chototAddANewPublicCampaignOfPromotionCampaignForAllUsers(DataTable table) {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(2));
        setCreditValue(Integer.parseInt(table.row(1).get(0)));
        setMaxRedeem(Integer.parseInt(table.row(1).get(1)));
        setMaxPerAccRedeem(Integer.parseInt(table.row(1).get(2)));
        setCodeQuantity(Integer.parseInt(table.row(1).get(3)));
        setCodeRedeemLimit(Integer.parseInt(table.row(1).get(4)));

        createCampaignCodePromotionAuto(getDateStart(), getDateEnd(), getCreditValue(), getMaxRedeem(), getMaxPerAccRedeem(), getCodeQuantity(), getCodeRedeemLimit(), "all", "public");
    }

    @When("The promotion campaign is created")
    public void thePromotionCampaignIsCreated() {
        verifyCampaignCodeID(getCampaignID());
    }

    @Then("I should see the promotion codes are auto generated")
    public void iShouldSeeThePromotionCodesAreAutoGenerated() {
        verifyPromotionCodeQuantity();
    }

    @Then("I can not redeem a promotion code when the campaign is deactivated")
    @Then("I can not redeem a promotion code of the future campaign")
    public void iRedeemAPromotionCodeWhenTheCampaignIsDeactivated() {
        redeemPromoCodeDeactivate();
    }

    @Then("I can redeem a promotion code with Internal request")
    @Then("I can redeem a promotion code")
    public void iRedeemAPromotionCodeWithInternalRequest() {
        redeemPromoCodeSuccessInternal();
    }

    @Then("I can redeem a promotion code with Private request")
    public void iRedeemAPromotionCodeWithPrivateRequest() {
        redeemPromoCodeSuccessPrivate();
    }

    @Then("I can not redeem a promotion code that is out of quantity")
    public void iRedeemAPromotionCodeWhichIsOutOfQuantity() {
        redeemPromoCodeFail();
    }

    @And("The credit is received by user")
    public void theCreditIsReceivedByUser() {
        getFreeCreditAfterRedeem(global_accessToken);
        verifyCreditBalance();
    }

    @And("I activate the promotion campaign")
    @And("I activate the future promotion campaign")
    public void iActivateThePromotionCampaign() {
        updateCampaignCodeToApproved();
        verifyCampaignCodeStatusIsApproved();
    }

    @When("ChoTot add a new future promotion campaign")
    public void choTotAddANewFuturePromotionCampaign(DataTable table) {
        setDateStart(getPlusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        setCreditValue(Integer.parseInt(table.row(1).get(0)));
        setMaxRedeem(Integer.parseInt(table.row(1).get(1)));
        setMaxPerAccRedeem(Integer.parseInt(table.row(1).get(2)));
        setCodeQuantity(Integer.parseInt(table.row(1).get(3)));
        setCodeRedeemLimit(Integer.parseInt(table.row(1).get(4)));

        createCampaignCodePromotionAuto(getDateStart(), getDateEnd(), getCreditValue(), getMaxRedeem(), getMaxPerAccRedeem(), getCodeQuantity(), getCodeRedeemLimit(), "all", "public");
        verifyCampaignCodeStatusIsNew();
    }

    @And("I deactivate the promotion campaign")
    public void iDeactivateThePromotionCampaign() {
        updateCampaignCodeToNew();
        verifyCampaignCodeStatusIsNew();
    }

    @Then("I should see there is no more promotion codes are generated")
    public void iShouldSeeThereIsNoMorePromotionCodesAreGenerated() {
        getValidPromoCodesAfter();
        verifyPromoCodesNotChange(getListValidPromoCode(), getListValidPromoCodeAfter());
    }

    @Then("I can not create a promotion campaign with {string} is invalid")
    public void iCanNotCreateAPromotionCampaignWithIsInvalid(String key) {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        createErrorCampaignPromotionNewFlow(key);
    }

    @Then("I should see the promotion codes are not generated")
    public void iShouldSeeThePromotionCodesAreNotGenerated() {
        verifyPromoCodeNotGenerate();
    }

    @Then("I should see there is no valid code generated")
    public void iShouldSeeThereIsNoValidCodeGenerated() {
        verifyInvalidPromoCodeQuantity();
    }

    @Then("I can not redeem a promotion code when reaching Max Per Account Redeem")
    public void iCanNotRedeemAPromotionCodeWhenReachingMaxPerAccountRedeem() {
        verifyRedeemPromoCodeLimitation();
    }

    @And("The free credit is not received by user")
    public void theFreeCreditIsNotReceivedByUser() {
        getFreeCreditNotChangeAfterRedeem(global_accessToken);
        verifyCreditBalanceNotChange();
    }

    @When("I edit Date Start of the promotion campaign to a date in the Future")
    public void iEditDateStartOfThePromotionCampaignToADateInTheFuture() {
        editDateTimeCampaignPromotionNewFLow("date_start", "future");
    }

    @When("I edit Date End of the promotion campaign to a date in the Past")
    public void iEditDateEndOfThePromotionCampaignToADateInThePast() {
        editDateTimeCampaignPromotionNewFLow("date_end", "past");
    }

    @Then("I can not redeem a promotion code when when editing start date to invalid")
    public void iCanNotRedeemAPromotionCodeWhenWhenEditingStartDateToInvalid() {
        verifyFailRedeemCodeAfterEdit();
    }

    @Then("I see Create Campaign action logged in History")
    public void iSeeCreateCampaignActionLoggedInHistory() {
        verifyHistoryCampaignCreate(getCampaignID());
    }

    @Then("I see Edit Campaign action logged in History")
    public void iSeeEditCampaignActionLoggedInHistory() {
        verifyHistoryCampaignEdit(getCampaignID());
    }

    @And("I edit info of the promotion code campaign")
    public void iEditInfoOfThePromotionCodeCampaign() {
        editPromotionCodeCampaignInfo(getCampaignID());
    }

    @And("I change the promotion code campaign status from New to Approved")
    public void iChangeThePromotionCodeCampaignStatusFromNewToApproved() {
        updateCampaignCodeStatus("approved");
    }

    @Then("I see change status from New to Approved action logged in History")
    public void iSeeChangeStatusFromNewToApprovedActionLoggedInHistory() {
        verifyHistoryCampaignCodeStatus(getCampaignID(), "new", "approved");
    }

    @Then("I see change status from Approved to Inactive action logged in History")
    public void iSeeChangeStatusFromApprovedToInactiveActionLoggedInHistory() {
        verifyHistoryCampaignCodeStatus(getCampaignID(), "approved", "inactive");
    }

    @When("I change the promotion code campaign status from Approved to Inactive")
    public void iChangeThePromotionCodeCampaignStatusFromApprovedToInactive() {
        updateCampaignCodeStatus("inactive");
    }

    @When("I change the promotion code campaign status from Inactive to Approved")
    public void iChangeThePromotionCodeCampaignStatusFromInactiveToApproved() {
        updateCampaignCodeStatus("approved");
    }

    @And("I see redeem action logged in History")
    public void iSeeRedeemActionLoggedInHistory() {
        verifyHistoryCampaignCodeRedeem(getCampaignID());
    }

    @When("ChoTot add a new Private campaign of promotion campaign for a Group of User")
    public void chototAddANewPrivateCampaignOfPromotionCampaignForAGroupOfUser(DataTable dataTable) {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(2));
        setCreditValue(Integer.parseInt(dataTable.row(1).get(0)));
        setMaxRedeem(Integer.parseInt(dataTable.row(1).get(1)));
        setMaxPerAccRedeem(Integer.parseInt(dataTable.row(1).get(2)));
        setCodeQuantity(Integer.parseInt(dataTable.row(1).get(3)));
        setCodeRedeemLimit(Integer.parseInt(dataTable.row(1).get(4)));

        createCampaignPromotionUserGroup(getDateStart(), getDateEnd(), getCreditValue(), getMaxRedeem(), getMaxPerAccRedeem(), getCodeQuantity(), getCodeRedeemLimit(), getUserGroupID(), "private");
    }

    @When("ChoTot add a new Public campaign of promotion campaign for a Group of User")
    public void chototAddANewPublicCampaignOfPromotionCampaignForAGroupOfUser(DataTable dataTable) {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(2));
        setCreditValue(Integer.parseInt(dataTable.row(1).get(0)));
        setMaxRedeem(Integer.parseInt(dataTable.row(1).get(1)));
        setMaxPerAccRedeem(Integer.parseInt(dataTable.row(1).get(2)));
        setCodeQuantity(Integer.parseInt(dataTable.row(1).get(3)));
        setCodeRedeemLimit(Integer.parseInt(dataTable.row(1).get(4)));

        createCampaignPromotionUserGroup(getDateStart(), getDateEnd(), getCreditValue(), getMaxRedeem(), getMaxPerAccRedeem(), getCodeQuantity(), getCodeRedeemLimit(), getUserGroupID(), "public");
    }

    @Then("User is not in group can not redeem a promotion code")
    public void userIsNotInGroupCanNotRedeemAPromotionCode() {
        getAccessTokenOfNewUser();
        redeemPromoCodeFailByUserGroup(newUserPhone, global_accountID);
    }

    @Then("User in group can redeem a promotion code")
    public void userInGroupCanRedeemAPromotionCodeWithInternalRequest() {
        redeemPromoCodeByUserGroup("group");
    }

    @And("The credit is received by user in group")
    public void theCreditIsReceivedByUserInGroup() {
        String tempToken = getAccessTokenOfUser(getUserGroupPhones().get(0), "123456");
        getFreeCreditAfterRedeem(tempToken);
        verifyCreditBalance();
    }

    @And("The credit is received by user is not in group")
    public void theCreditIsReceivedByUserIsNotInGroup() {
        String tempToken = getAccessTokenOfUser(newUserPhone, "123456");
        getFreeCreditAfterRedeem(tempToken);
        verifyCreditBalance();
    }

    @And("The free credit is not received by user is not in group")
    @And("The free credit via auto redeem is not received by user")
    public void theFreeCreditIsNotReceivedByUserIsNotInGroup() {
        getFreeCreditNotChangeAfterRedeem(global_accessToken);
        verifyCreditBalanceNotChange();
    }

    @Then("User is not in group can redeem a promotion code")
    public void userIsNotInGroupCanRedeemAPromotionCode() {
        redeemPromoCodeByUserGroup("user");
    }

    @Then("I can redeem a promotion code with the Phone number were wrong")
    public void iCanRedeemAPromotionCodeWithThePhoneNumberWereWrong() {
        redeemPromoCodeWithWrongPhone();
    }

    @Then("I can not redeem a promotion code with the Account ID were wrong")
    public void iCanRedeemAPromotionCodeWithTheAccountIDWereWrong() {
        redeemPromoCodeWithWrongAccID();
    }

    @When("ChoTot add a new Private campaign of promotion campaign for All users")
    public void chototAddANewPrivateCampaignOfPromotionCampaignForAllUsers(DataTable table) {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(2));
        setCreditValue(Integer.parseInt(table.row(1).get(0)));
        setMaxRedeem(Integer.parseInt(table.row(1).get(1)));
        setMaxPerAccRedeem(Integer.parseInt(table.row(1).get(2)));
        setCodeQuantity(Integer.parseInt(table.row(1).get(3)));
        setCodeRedeemLimit(Integer.parseInt(table.row(1).get(4)));

        createCampaignCodePromotionAuto(getDateStart(), getDateEnd(), getCreditValue(), getMaxRedeem(), getMaxPerAccRedeem(), getCodeQuantity(), getCodeRedeemLimit(), "all", "private");
    }

    @Then("I can not create a promotion campaign with Free Value is invalid")
    public void iCanNotCreateAPromotionCampaignWithFreeValueIsInvalid() {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        createErrorCampaignPromotionNewFlow("free_value");
    }

    @And("I can not create a promotion campaign with Max Redeem is invalid")
    public void iCanNotCreateAPromotionCampaignWithMaxRedeemIsInvalid() {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        createErrorCampaignPromotionNewFlow("max_redeem");
    }

    @And("I can not create a promotion campaign with Max Per Account Redeem is invalid")
    public void iCanNotCreateAPromotionCampaignWithMaxPerAccountRedeemIsInvalid() {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        createErrorCampaignPromotionNewFlow("max_per_account_redeem");
    }

    @And("I can not create a promotion campaign with Date Start is invalid")
    public void iCanNotCreateAPromotionCampaignWithDateStartIsInvalid() {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        createErrorCampaignPromotionNewFlow("date_start");
    }

    @And("I can not create a promotion campaign with Date End is invalid")
    public void iCanNotCreateAPromotionCampaignWithDateEndIsInvalid() {
        setDateStart(getMinusDateTimeFromCurrentTime(2));
        setDateEnd(getPlusDateTimeFromCurrentTime(3));
        createErrorCampaignPromotionNewFlow("date_end");
    }

    @Then("Redeem promotion code for group of user by Auto Redeem")
    public void redeemPromotionCodeForGroupOfUserByAutoRedeem() {
        autoRedeemPromoCode(getCampaignID());
    }

    @And("The credit is received by all users in group")
    public void theCreditIsReceivedByAllUserInGroup() {
        verifyFreeCreditUserGroup(getUserGroupPhones());
    }

    @Then("The credit is not received by all users in group")
    public void theCreditIsNotReceivedByAllUsersInGroup() {
        verifyFreeCreditNotReceiveUserGroup(getUserGroupPhones());
    }

    @Then("Auto Redeem for group of user is FAILED")
    public void autoRedeemForGroupOfUserIsFAILED() {
        autoRedeemPromoCodeFail(getCampaignID());
    }
}
